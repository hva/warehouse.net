<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Warehouse.Wpf.Controls;assembly=Warehouse.Wpf.Controls"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:behaviors="clr-namespace:Warehouse.Wpf.Controls.Behaviors;assembly=Warehouse.Wpf.Controls">

    <!--Button-->
    <Style x:Key="Button_Default" TargetType="Button">
        <Setter Property="Height" Value="23" />
        <Setter Property="Width" Value="80" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="0,3" />
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource Button_Default}" />
    <Style x:Key="FormButton" TargetType="Button" BasedOn="{StaticResource Button_Default}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="120,0,0,0" />
    </Style>

    <!--Label-->
    <Style x:Key="Label_Default" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="Width" Value="100" />
    </Style>
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource Label_Default}" />

    <!--TextBox-->
    <Style x:Key="TextBox_Default" TargetType="TextBox">
        <Setter Property="Margin" Value="0,3" />
        <Setter Property="Width" Value="150" />
    </Style>
    <Style TargetType="TextBox" BasedOn="{StaticResource TextBox_Default}"/>

    <!--PasswordBox-->
    <Style TargetType="PasswordBox">
        <Setter Property="Margin" Value="0,3" />
        <Setter Property="Width" Value="150" />
    </Style>

    <!--ComboBox-->
    <Style TargetType="ComboBox">
        <Setter Property="Margin" Value="0,5" />
        <Setter Property="Width" Value="150" />
    </Style>

    <!-- ProgressRing -->
    <Style x:Key="FormProgressRing" TargetType="controls:ProgressRing">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="85,0,0,0" />
    </Style>

    <!--StackPanel-->
    <Style x:Key="FormButtons" TargetType="{x:Type Border}">
        <Style.Resources>
            <Style TargetType="{x:Type StackPanel}">
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="HorizontalAlignment" Value="Right" />
            </Style>
        </Style.Resources>
        <Setter Property="Height" Value="40" />
        <Setter Property="Padding" Value="0,0,10,0" />
        <Setter Property="Background" Value="#F0F0F0" />
    </Style>

    <ControlTemplate x:Key="ErrorTemplateSilverlightStyle">
        <StackPanel Orientation="Horizontal">
            <!-- Defines TextBox outline border and the ToolTipCorner -->
            <Border x:Name="border" BorderThickness="1.25" BorderBrush="#FFDC000C">
                <Grid>
                    <Polygon
                        x:Name="toolTipCorner"
                        Grid.ZIndex="2"
                        Margin="-1"
                        Points="9,9 9,0 0,0"
                        Fill="#FFDC000C"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        IsHitTestVisible="True" />
                    <Polyline
                        Grid.ZIndex="3"
                        Points="10,10 0,0"
                        Margin="-1"
                        HorizontalAlignment="Right"
                        StrokeThickness="1.5"
                        StrokeEndLineCap="Round"
                        StrokeStartLineCap="Round"
                        Stroke="White"
                        VerticalAlignment="Top"
                        IsHitTestVisible="True" />
                    <AdornedElementPlaceholder x:Name="adorner"/>
                </Grid>
            </Border>
            <!-- Defines the Popup -->
            <Popup
                x:Name="placard"
                AllowsTransparency="True"
                PopupAnimation="Fade"
                Placement="Top"
                PlacementTarget="{Binding ElementName=toolTipCorner}"
                PlacementRectangle="10,-1,0,0">
                <!-- Used to reposition Popup when dialog moves or resizes -->
                <i:Interaction.Behaviors>
                    <behaviors:RepositionPopupBehavior/>
                </i:Interaction.Behaviors>
                <Popup.Style>
                    <Style TargetType="{x:Type Popup}">
                        <Style.Triggers>
                            <!-- Shows Popup when TextBox has focus -->
                            <DataTrigger Binding="{Binding ElementName=adorner, Path=AdornedElement.IsFocused}" Value="True">
                                <Setter Property="IsOpen" Value="True"/>
                            </DataTrigger>
                            <!-- Shows Popup when mouse hovers over ToolTipCorner -->
                            <DataTrigger Binding="{Binding ElementName=toolTipCorner, Path=IsMouseOver}" Value="True">
                                <Setter Property="IsOpen" Value="True"/>
                            </DataTrigger>
                            <!-- Hides Popup when window is no longer active -->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False">
                                <Setter Property="IsOpen" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Popup.Style>
                <Border
                    x:Name="errorBorder"
                    Background="#FFDC000C"
                    Margin="0,0,8,8"
                    Opacity="1"
                    CornerRadius="4"
                    IsHitTestVisible="False"
                    MinHeight="24"
                    MaxWidth="267">
                    <Border.Effect>
                        <DropShadowEffect
                            ShadowDepth="4"
                            Color="Black"
                            Opacity="0.6"
                            Direction="315"
                            BlurRadius="4"/>
                    </Border.Effect>
                    <TextBlock
                        Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}"
                        Foreground="White"
                        Margin="8,3,8,3"
                        TextWrapping="Wrap" />
                </Border>
            </Popup>
        </StackPanel>
    </ControlTemplate>

</ResourceDictionary>